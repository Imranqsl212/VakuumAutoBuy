const walletAAddress = "UQA72LFQ2TZqZI61ra_OaHW05vZJ9DNcqulKaD1ng6mHjavV";

const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
  manifestUrl: "https://imranqsl212.github.io/VakuumAutoBuy/tonconnect-manifest.json",
  buttonRootId: "ton-connect"
});

const transferBtn = document.getElementById("transferBtn");
const status = document.getElementById("status");
const amountInput = document.getElementById("amountInput");

// –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
const topupBalanceElem = document.getElementById("topupBalance");

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∏—Ç—å –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π
async function updateTopupBalance(address) {
  try {
    const response = await fetch(`http://192.168.0.101:5001/get-topup/${address}`);
    const data = await response.json();
    topupBalanceElem.innerText = `–í—ã –≤—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏: ${parseFloat(data.total_topup).toFixed(3)} TON`;
  } catch (e) {
    topupBalanceElem.innerText = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π.";
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞:", e);
  }
}

tonConnectUI.onStatusChange(async (wallet) => {
  if (wallet && wallet.account && wallet.account.address) {
    const walletBAddress = wallet.account.address;
    status.innerText = `üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${walletBAddress}`;
    transferBtn.style.display = "block";
    await updateTopupBalance(walletBAddress);
  } else {
    status.innerText = "üîå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫.";
    transferBtn.style.display = "none";
    topupBalanceElem.innerText = "";
  }
});

transferBtn.addEventListener("click", async () => {
  const isConnected = await tonConnectUI.connected;
  if (!isConnected) {
    alert("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫.");
    return;
  }

  const inputValue = parseFloat(amountInput.value);
  if (isNaN(inputValue) || inputValue <= 0) {
    alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É TON.");
    return;
  }

  const amountNanoTON = (inputValue * 1e9).toFixed(0);
  const senderAddress = tonConnectUI.account.address;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø—Ä–æ—á–µ–µ...

  const transaction = {
    validUntil: Math.floor(Date.now() / 1000) + 60,
    messages: [
      {
        address: walletAAddress,
        amount: amountNanoTON
      }
    ]
  };

  try {
    const result = await tonConnectUI.sendTransaction(transaction, {
      modals: ['before', 'success', 'error'],
      notifications: ['before', 'success', 'error']
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    await fetch('http://192.168.0.101:5001/save-topup', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        address: senderAddress,
        amount: inputValue
      })
    });

    status.innerHTML = `‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${inputValue} TON –Ω–∞ <b>${walletAAddress}</b>`;
    await updateTopupBalance(senderAddress);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
    status.innerText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.";
  }
});